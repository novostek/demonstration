<%= content_for :head_content do %>
  <style>
    .order-cost-list .oc-item {
      position: static;
    }

    div.disabled-div {
      pointer-events: none;

      /* for "disabled" effect */
      opacity: 0.5;
      background: #CCC;
    }
  </style>
<% end %>
<div class="row">
	<div class="breadcrumbs-light pb-0 pt-4" id="breadcrumbs-wrapper">
		<!-- Search for small screen-->
		<div class="container">
			<div class="row">
				<div class="col s10 m6 l6">
					<h5 class="breadcrumbs-title mt-0 mb-0"><%= t 'activerecord.models.estimates' %> <%= t 'texts.estimate.measurements' %></h5>
					<ol class="breadcrumbs mb-0">
						<li class="breadcrumb-item"><a href="/"><%= t 'breadcrumb.home' %></a>
						</li>
						<li class="breadcrumb-item"><a href="#"><%= t 'activerecord.models.estimates' %></a>
						</li>
						<li class="breadcrumb-item"><a href="#"><%= t 'breadcrumb.new' %></a>
						</li>
						<li class="breadcrumb-item active"><%= t 'texts.estimate.measurements' %>
						</li>
					</ol>
				</div>
				<!-- <div class="col s2 m6 l6"><a class="btn waves-effect waves-light breadcrumbs-btn right" href="lead-add.html"><i class="material-icons hide-on-med-and-up">add</i><span class="hide-on-small-only">New Estimate</span></a> -->
			</div>
		</div>
	</div>
</div>
<%= render 'estimates/estimate_detail' %>
<%= form_for @estimate, local: true, url: estimate_path, method: :patch do |form| %>
	<%= hidden_field_tag :id_estimate, @estimate.id %>
  <div class="card">
		<div class="card-content">
			<ul class="stepper horizontal stepper-head-only">
				<li class="step">
					<%= link_to step_one_estimates_path(@estimate.lead, estimate: @estimate.id) do %>
						<div class="step-title waves-effect"><%= t 'breadcrumb.step_one' %></div>
					<% end %>
				</li>
				<li class="step ">
					<% if @estimate.schedules.present? %>
						<%= link_to schedule_estimate_path(@estimate) do %>
							<div class="step-title waves-effect"><%= t 'activerecord.models.schedule' %></div>
						<% end %>
					<% else %>
						<div class="step-title waves-effect"><%= t 'activerecord.models.schedule' %></div>
					<% end %>
				</li>
				<li class="step active">
					<% if @estimate.measurements.present? %>
						<%= link_to measurement_view_estimates_path(@estimate) do %>
							<div class="step-title waves-effect"><%= t 'texts.estimate.measurements' %></div>
						<% end %>
					<% else %>
							<div class="step-title waves-effect"><%= t 'texts.estimate.measurements' %></div>
					<% end %>
				</li>
				<li class="step">
					<% if @estimate.product_estimates.present? %>
						<%= link_to products_estimate_path(@estimate) do %>
							<div class="step-title waves-effect"><%= t 'texts.estimate.itens' %></div>
						<% end %>
					<% else %>
						<div class="step-title waves-effect"><%= t 'texts.estimate.itens' %></div>
					<% end %>
				</li>
			</ul>
      <div class="row">
        <div class="right">
          <span id="msg-save" style="display: none"><i class="material-icons">cloud_done</i></span>
          <span id="msg-saving" style="display: none" class=""><i class="material-icons left">loop</i>Salvando...</span>
          <span id="msg-save-error" style="display: none"> <i class="material-icons">cloud_off</i></span>
        </div>
      </div>
			<div class="m-area-list row pl-1 pr-1 measurement_areas" id="measurement_areas">
				<%= form.fields_for :measurement_areas, @estimate.measurement_areas.order(created_at: :asc) do |measurement_area_form| %>
					<%= render 'measurement_area_fields', f: measurement_area_form %>
				<% end %>
			</div>
      <div id="new-measurement-areas" class="row pl-1 pr-1">
        <div class="row mt-1">
          <%= link_to_add_association form, :measurement_areas, id: "add_area", class: 'btn btn-add-area btn-secondary' do %>
            <i class="material-icons left">add</i> <%= t 'button.add' %> <%= t 'area' %>
          <% end %>
        </div>
      </div>
		</div>
	</div>
	<div class="col s12 pb-2 pr-0 pl-0">
		<%= form.hidden_field :count, value: @estimate.measurement_areas.length, id: 'count_areas' %>
		<%= link_to schedule_estimate_path(@estimate.id), target: '_self',
			class:"btn grey lighten-5 grey-text waves-effect waves-light breadcrumbs-btn left save" do %>
			<%= t 'button.back' %> <i class="material-icons left">arrow_back</i>
		<% end %>
		<%= form.button :submit, id: "next_step", class:"btn indigo waves-effect waves-light breadcrumbs-btn right ml-1" do %>
			<%= t 'button.next' %>: <%= t 'texts.estimate.itens' %>
			<i class="material-icons right">arrow_forward</i>
		<% end %>
	</div>
	<div id="area_modal" class="modal modal-fixed-footer">
    <div class="modal-content">
      <h4><%= t 'texts.measurement_area.calculate_your_areas' %></h4>
      <span id="measure_container">
			</span>
			<a href="#" class="btn right" onclick="add_calculate_area()">add areas</a>
    </div>
    <div class="modal-footer">
      <a href="#!" class="modal-action modal-close waves-effect waves-red btn-flat left">Close</a>
      <a href="#!" class="modal-close waves-effect waves-green btn-flat" onclick="calculate_sqft(event)"><%= t 'texts.measurement_area.calculate' %></a>
    </div>
  </div>
<% end %>

<%= content_for :scripts do %>
	<script>
		function remove_calculate_area(event) {
			const measure_container = document.getElementById('measure_container');
			const measures = Array.prototype.slice.call(measure_container.children)
		}

		function calculate_sqft(event) {
			const measure_container = document.getElementById('measure_container');
			const measures = Array.prototype.slice.call(measure_container.children)
			const square_feet_total_id = measure_container.getAttribute('square_feet_id')
			const square_feet_total_input = document.getElementById(square_feet_total_id)
			console.log(square_feet_total_input)
			const measures_id = measure_container.getAttribute('measures_id')
			const measures_input = document.getElementById(measures_id)
			let square_feet = 0
			const measure_json = {
				"value": []
			}
			measures.map((divs) => {
				const measureRow = Array.prototype.slice.call(divs.children)
				measureRow.map((measure, index) => {
					if(index %3 == 0 && index != measureRow.length - 1){
						console.log(measure)
						const width = measure.children[0].value
						const length = measure.nextSibling.children[0].value
						const sqft = measure.nextSibling.nextSibling.children[0].value
						measure_json.value.push({
							width,
							length,
							"square_feet": sqft
						})
						square_feet = Number(square_feet) + Number(sqft)
					}
				})
			})
			square_feet_total_input.value = square_feet
			measures_input.value = JSON.stringify(measure_json)
		}

		function add_calculate_area() {
			const divRow = document.createElement("div");
			divRow.setAttribute("class", "display-flex align-items-center justify-content-between");

			const measure_container = document.getElementById('measure_container');
			const index = measure_container.children.length;

			const divWidth = document.createElement("div");
			divWidth.setAttribute("class", "input-field col s12");

			const inputWidth = document.createElement("input");
			inputWidth.setAttribute("name", `measures[${index}][width]`)
			inputWidth.setAttribute("id", `width[${index}]`)
			inputWidth.setAttribute("value", '0.0')
			inputWidth.setAttribute("type", "number")
			inputWidth.setAttribute("step", "0.01")
			inputWidth.setAttribute("min", "0")
			inputWidth.onchange = function () {
				const width = this.value;
				const length = this.parentElement.nextSibling.children[0].value
				//this.parentElement.parentElement.children[2].children[0].value = width * length
				this.parentElement.parentElement.getElementsByClassName("square_feet")[0].value = width * length
			}
			divWidth.appendChild(inputWidth);

			const labelWidth = document.createElement("label");
			labelWidth.setAttribute("for", `width[${index}]`)
			labelWidth.setAttribute("class", "active")
			labelWidth.innerHTML = "<%= t 'activerecord.attributes.measurement.width' %>"
			divWidth.appendChild(labelWidth)

			const divLength = document.createElement("div");
			divLength.setAttribute("class", "input-field col s12");

			const inputLength = document.createElement("input");
			inputLength.setAttribute("name", `measures[${index}][length]`)
			inputLength.setAttribute("id", `length[${index}]`)
			inputLength.setAttribute("value", '0.0')
			inputLength.setAttribute("type", "number")
			inputLength.setAttribute("step", "0.01")
			inputLength.setAttribute("min", "0")
			inputLength.onchange = function () {
				const length = this.value;
				const width = this.parentElement.previousSibling.children[0].value
				this.parentElement.parentElement.getElementsByClassName("square_feet")[0].value = width * length
			}
			divLength.appendChild(inputLength);

			const labelLength = document.createElement("label");
			labelLength.setAttribute("for", `length[${index}]`)
			labelLength.setAttribute("class", "active")
			labelLength.innerHTML = "<%= t 'activerecord.attributes.measurement.length' %>"
			divLength.appendChild(labelLength)

			const divSqft = document.createElement("div");
			divSqft.setAttribute("class", "input-field col s12");

			const inputSqft = document.createElement("input");
			inputSqft.setAttribute("name", `measures[${index}][square_feet]`)
			inputSqft.setAttribute("id", `square_feet[${index}]`)
			inputSqft.setAttribute("class", 'square_feet')
			inputSqft.setAttribute("value", '0.0')
			inputSqft.setAttribute("type", "number")
			inputSqft.setAttribute("step", "0.01")
			inputSqft.setAttribute("min", "0")
			divSqft.appendChild(inputSqft);

			const labelsQFT = document.createElement("label");
			labelsQFT.setAttribute("for", `square_feet[${index}]`)
			labelsQFT.setAttribute("class", "active")
			labelsQFT.innerHTML = "<%= t 'activerecord.attributes.measurement.square_feet' %>"
			divSqft.appendChild(labelsQFT)

			const aRemove = document.createElement("a")
			aRemove.setAttribute("href", "#")
			aRemove.setAttribute("class", "col right")
			aRemove.onclick = function () {
				this.parentElement.remove();
			}
			const iconRemove = document.createElement("i")
			iconRemove.setAttribute("class", "material-icons")
			iconRemove.innerHTML = "close"
			aRemove.appendChild(iconRemove)

			divRow.appendChild(divWidth)
			divRow.appendChild(divLength)
			divRow.appendChild(divSqft)
			divRow.appendChild(aRemove)

			measure_container.appendChild(divRow)
		}

		function calculate_areas(event) {
			const regex = /=>/gi;
			console.log(event.target.parentElement.children[0].id)
			const measures = JSON.parse(String(event.target.parentElement.nextSibling.nextSibling.value).replace(regex, ":"));
			const measure_container = document.getElementById('measure_container');
			measure_container.setAttribute("square_feet_id", event.target.parentElement.children[0].id)
			measure_container.setAttribute("measures_id", event.target.parentElement.nextSibling.nextSibling.id)
			measure_container.innerHTML = '';


			measures.value.map((measure, index) => {
				const divRow = document.createElement("div");
				divRow.setAttribute("class", "display-flex align-items-center justify-content-between");

				const divWidth = document.createElement("div");
				divWidth.setAttribute("class", "input-field col s12");

				const inputWidth = document.createElement("input");
				inputWidth.setAttribute("name", `measures[${index}][width]`)
				inputWidth.setAttribute("id", `width[${index}]`)
				inputWidth.setAttribute("value", measure.width)
				inputWidth.setAttribute("type", "number")
				inputWidth.setAttribute("step", "0.01")
				inputWidth.setAttribute("min", "0")
				inputWidth.onchange = function () {
					const width = this.value;
					const length = this.parentElement.nextSibling.children[0].value
					this.parentElement.parentElement.getElementsByClassName("square_feet")[0].value = width * length
				}
				divWidth.appendChild(inputWidth);

				const labelWidth = document.createElement("label");
				labelWidth.setAttribute("for", `width[${index}]`)
				labelWidth.setAttribute("class", "active")
				labelWidth.innerHTML = "<%= t 'activerecord.attributes.measurement.width' %>"
				divWidth.appendChild(labelWidth)

				const divLength = document.createElement("div");
				divLength.setAttribute("class", "input-field col s12");

				const inputLength = document.createElement("input");
				inputLength.setAttribute("name", `measures[${index}][length]`)
				inputLength.setAttribute("id", `length[${index}]`)
				inputLength.setAttribute("value", measure.length)
				inputLength.setAttribute("type", "number")
				inputLength.setAttribute("step", "0.01")
				inputLength.setAttribute("min", "0")
				inputLength.onchange = function () {
					const length = this.value;
					const width = this.parentElement.previousSibling.children[0].value
					this.parentElement.parentElement.getElementsByClassName("square_feet")[0].value = width * length
				}
				divLength.appendChild(inputLength);

				const labelLength = document.createElement("label");
				labelLength.setAttribute("for", `length[${index}]`)
				labelLength.setAttribute("class", "active")
				labelLength.innerHTML = "<%= t 'activerecord.attributes.measurement.length' %>"
				divLength.appendChild(labelLength)

				const divSqft = document.createElement("div");
				divSqft.setAttribute("class", "input-field col s12");

				const inputSqft = document.createElement("input");
				inputSqft.setAttribute("name", `measures[${index}][square_feet]`)
				inputSqft.setAttribute("id", `square_feet[${index}]`)
				inputSqft.setAttribute("value", measure.square_feet)
				inputSqft.setAttribute("class", 'square_feet')
				inputSqft.setAttribute("type", "number")
				inputSqft.setAttribute("step", "0.01")
				inputSqft.setAttribute("min", "0")
				divSqft.appendChild(inputSqft);

				const labelsQFT = document.createElement("label");
				labelsQFT.setAttribute("for", `square_feet[${index}]`)
				labelsQFT.setAttribute("class", "active")
				labelsQFT.innerHTML = "<%= t 'activerecord.attributes.measurement.square_feet' %>"
				divSqft.appendChild(labelsQFT)

				const aRemove = document.createElement("a")
				aRemove.setAttribute("href", "#")
				aRemove.setAttribute("class", "col right")
				aRemove.onclick = function () {
					this.parentElement.remove();
				}

				const iconRemove = document.createElement("i")
				iconRemove.setAttribute("class", "material-icons")
				iconRemove.innerHTML = "close"
				aRemove.appendChild(iconRemove)

				divRow.appendChild(divWidth)
				divRow.appendChild(divLength)
				divRow.appendChild(divSqft)
				divRow.appendChild(aRemove)

				measure_container.appendChild(divRow)
			})
		}

    var timer;
    var fun = function autosave() {
        $('#msg-save').hide();
        $('#msg-save-error').hide();
        $('#msg-saving').show();

        const form = $('form.edit_estimate');
        const formData = new FormData(form[0]);

        const estimate_id = $('#id_estimate').val();
        $.ajax({
            url: `/estimates/${estimate_id}/autosave_areas`,
            data: formData,
            processData: false,
            contentType: false,
            type: 'POST',
            dataType: 'json',
            success: function (data) {

                // 1. Pegar as MeasurementArea que nao tinham id_db, mas agora vão ter
                let persisted_areas = data.ids_ordenate_old_params.filter(ma => ma.id_db === null && ma.name !== '' );

                if (persisted_areas.length > 0) {

                    // 2. Seta id_db da MeasurementArea e da Measurement
                    $('#new-measurement-areas').children('.nested-fields').each(function() {
                        let id_cocoon = $(this).children('input[name="id-cocoon"]').val();
                        let index_estimate = data.ids_ordenate_old_params.filter(ma => ma.id_cocoon === id_cocoon)[0].index_estimate;

                        // Verifica se esta MeasurementArea foi persistida
                        if (persisted_areas.map(ma => ma.id_cocoon).includes(id_cocoon)) {

                            // Pega o MeasurementArea persistida
                            const ma_persisted = data.ids_ordenate_current_estimate.filter(ma => ma.index_estimate === index_estimate)[0]

                            // Adiciona id_db da MeasurementArea
                            $(this).append(`<input type="hidden" value="${ma_persisted.id_db}" name="estimate[measurement_areas_attributes][${id_cocoon}][id]" id="estimate_measurement_areas_attributes_${id_cocoon}_id">`);

                            // Adiciona id_db da Measurement
                            const id_measurement_db = ma_persisted.first_measurement;
                            $('#new-measurement-areas').children('.nested-fields').each(function() {
                                if($(this).children('input[name="id-cocoon"]').val() == id_cocoon){
                                    $(this).children('.m-area--measures').append(`<input type="hidden" value="${id_measurement_db}" name="estimate[measurement_areas_attributes][${id_cocoon}][measurements_attributes][0][id]" id="estimate_measurement_areas_attributes_${id_cocoon}_measurements_attributes_0_id">`);
                                }
                            })

                        }

                    });
                }

                // Message
                $('#msg-saving').hide();
                $('#msg-save').show();
            },
            error: function (data) {

                // Message
                $('#msg-saving').hide();
                $('#msg-save-error').show();
            }
        });
    };

    const next_button = $('#next_step')
    let count_areas = $('#count_areas').val()
    let refreshIntervalId = null;
    const time = 10000; // 30s
    $(document).ready(function () {
        count_areas <= 0 ? next_button.addClass('disabled') : next_button.removeClass('disabled');
    }).on('cocoon:after-insert', function (e, added_thing) {
        count_areas++;
        count_areas <= 0 ? next_button.addClass('disabled') : next_button.removeClass('disabled');

        // Adiciona campo para facilitar a busca no momento do autosave
        $(added_thing).append(`<input type="hidden" name="id-cocoon" value="${added_thing.children('input').attr('id').split('_')[4]}" />`);

        // Autosave
        fun();
    }).on('cocoon:after-remove', function () {
        count_areas--;
        count_areas <= 0 ? next_button.addClass('disabled') : next_button.removeClass('disabled');
    });

		function calc_square_feet(e) {
			const { id, value } = e.target
			const r = /\d+/

			const length = parseFloat(document.getElementById(`estimate_measurement_areas_attributes_${id.match(r)}_measurements_attributes_0_length`).value)
			const width = parseFloat(document.getElementById(`estimate_measurement_areas_attributes_${id.match(r)}_measurements_attributes_0_width`).value)
			const square_feet = document.getElementById(`estimate_measurement_areas_attributes_${id.match(r)}_measurements_attributes_0_square_feet`)
			square_feet.nextElementSibling.classList.add('active')

			square_feet.value = parseFloat(length * width)
		}

    $(document).ready(function() {
        $(window).keydown(function(event){
            if(event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });
    });
	</script>
<% end %>